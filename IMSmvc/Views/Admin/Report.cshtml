
@{
    ViewBag.Title = "Report";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report Management</title>
    <style>
        /* Your existing CSS styles here */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }

        h1, h2, h3 {
            text-align: center;
            color: navajowhite;
        }

        #OrderForm {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px auto;
        }

        .form-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

            .form-group label {
                flex: 0 0 30%;
                font-weight: bold;
                color: #2c3e50;
            }

            .form-group input {
                flex: 1;
                padding: 8px;
                border-radius: 4px;
                border: 1px solid #ccc;
            }

        button {
            padding: 10px;
            width: 100%;
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            border-radius: 4px;
        }

            button:hover {
                background-color: #2980b9;
            }

        #responseMessage {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
        }

        #OrdersList {
            margin-top: 30px;
        }

        table {
            background-color: white; /* Set background color to white */
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2980b9;
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            background-image: url("https://cdn.prod.website-files.com/65cda65f0af1fe67dc20dfeb/65f2bc85b082d079e5b09490_4.png");
            background-repeat: no-repeat;
            background-size: cover;
        }
    </style>
</head>
<body>

    <h1>Report Management</h1>

    <label id="responseMessage"></label>

    <h2>View Report</h2>
    <br />
    <button type="button" onclick="fetchAllReports()" style="color:antiquewhite">Get Reports</button>
    <br />
    <button type="button" onclick="downloadReport()" style="color:antiquewhite">Download Report</button>
    <br />
    <div id="ReportsList"></div>
    <br />

    <script>
        const apiUrl = 'https://localhost:44340/api/Reports/inventoryreport'; // Adjust API URL accordingly
        let currentReports = [];

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        function fetchAllReports() {
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch reports');
                    }
                    return response.json();
                })
                .then(data => {
                    currentReports = data;  // Store the fetched reports for later download
                    displayReports(data);
                })
                .catch(error => displayMessage(error.message, true));
        }

     
        function displayReports(reports) {
            const reportsList = document.getElementById("ReportsList");

            if (reports.length === 0) {
                reportsList.innerHTML = '<p>No reports found.</p>';
                return;
            }

            // Check if stock level is below reorder level
            reports.forEach(report => {
                if (report.stockLevel < report.reorderLevel) {
                    alert(`Warning: Stock level for product ID ${report.productId} is below the reorder level!`);
                }
            });

            // Display the reports in a table format
            reportsList.innerHTML = `<br/><table>
        <tr><th>Supplier ID</th><th>Supplier Name</th><th>Product Id</th><th>Stock Level</th><th>Re-Order Level</th><th>Quantity</th></tr>
        ${reports.map(report => `
            <tr>
                <td>${report.supplierId}</td>
                <td>${report.supplierName}</td>
                <td>${report.productId}</td>
                <td>${report.stockLevel}</td>
                <td>${report.reorderLevel}</td>
                <td>${report.quantity}</td>
            </tr>`).join('')}
    </table>`;
        }

        function downloadReport() {
            if (currentReports.length === 0) {
                displayMessage('No reports available for download', true);
                return;
            }

            const headers = ['Supplier ID', 'Supplier Name', 'Product Id', 'Stock Level', 'Re-Order Level', 'Quantity'];
            const rows = currentReports.map(report => [
                report.supplierId,
                report.supplierName,
                report.productId,
                report.stockLevel,
                report.reorderLevel,
                report.quantity
            ]);

            const csvContent = [
                headers.join(','),  // Add the header row
                ...rows.map(row => row.join(','))  // Add each row of data
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'inventory_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
</body>
</html>








