@*@{
        ViewBag.Title = "Report";
    }

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Report Management</title>
        <style>
            /* Your existing CSS styles here */
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-image: url("https://img.freepik.com/premium-photo/abstract-design-elementannual-saleshopping-season-conceptmini-cart-with-colorful-paper-bag-white-wooden-table-backgroundtop-viewflat-lay_1040174-5645.jpg?ga=GA1.1.1982704250.1732540291&semt=ais_hybrid");
                background-repeat: no-repeat;
                background-size: cover;
            }

            h1 {
                text-align: center;
                color: black;
            }
            h2, h3 {
                text-align: center;
                color: black;
            }
            button {
                padding: 10px;
                width: 30%;
                background-color: #3498db;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 16px;
                margin-top: 10px;
                border-radius: 4px;
            }

                button:hover {
                    background-color: #2980b9;
                }

            #responseMessage {
                margin-top: 20px;
                text-align: center;
                font-weight: bold;
            }

            #ReportsList, #SalesReportList, #supplierPerformanceReport {
                margin-top: 30px;
            }

            table {
                background-color: white;
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
                box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            }

            th, td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }

            th {
                background-color: #2980b9;
                color: white;
                font-weight: bold;
            }

            tr:hover {
                background-color: #f1f1f1;
            }
        </style>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    </head>
    <body>

        <h1>Report Management</h1>

        <label id="responseMessage"></label>

        <h2>StockLevel Report</h2>
        <button type="button" onclick="fetchAllReports()">StockLevel Report</button>
        <br />
        <button type="button" onclick="downloadReport()">Download Report</button>
        <div id="ReportsList"></div>

        <h2>Supplier Performance Report</h2>
        <button id="getSupplierPerformanceBtn"> Supplier Performance</button>
        <div id="supplierPerformanceReport"></div>

        <h2>Sales Report Management</h2>
        <button type="button" onclick="fetchSalesReport()">Sales Report</button>
        <div id="SalesReportList"></div>

        <script>
            const apiUrl = 'http://localhost:5108/api/Reports/inventoryreport';  // Inventory report endpoint
            const salesReportUrl = 'http://localhost:5108/api/Reports/salesreport';  // Sales report endpoint
            const supplierPerformanceUrl = 'http://localhost:5108/api/Reports/supplier-performance';  // Supplier performance endpoint
            let currentReports = [];
            let currentSalesReport = [];

            // Function to display messages
            function displayMessage(message, isError = false) {
                const responseLabel = document.getElementById("responseMessage");
                responseLabel.style.color = isError ? "red" : "green";
                responseLabel.textContent = message;
            }

            // Fetch all reports
            function fetchAllReports() {
                fetch(apiUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch reports');
                        }
                        return response.json();
                    })
                    .then(data => {
                        currentReports = data;
                        displayReports(data);
                    })
                    .catch(error => displayMessage(error.message, true));
            }

            // Display reports in a table
            function displayReports(reports) {
                const reportsList = document.getElementById("ReportsList");

                if (reports.length === 0) {
                    reportsList.innerHTML = '<p>No reports found.</p>';
                    return;
                }

                reportsList.innerHTML = `<br/><table>
                                                <tr><th>Supplier ID</th><th>Supplier Name</th><th>Product Id</th><th>Stock Level</th><th>Re-Order Level</th><th>Quantity</th></tr>
                                                ${reports.map(report => `
                                                    <tr>
                                                        <td>${report.supplierId}</td>
                                                        <td>${report.supplierName}</td>
                                                        <td>${report.productId}</td>
                                                        <td>${report.stockLevel}</td>
                                                        <td>${report.reorderLevel}</td>
                                                        <td>${report.quantity}</td>
                                                    </tr>`).join('')}
                                            </table>`;
            }

            // Download reports as CSV
            function downloadReport() {
                if (currentReports.length === 0) {
                    displayMessage('No reports available for download', true);
                    return;
                }

                const headers = ['Supplier ID', 'Supplier Name', 'Product Id', 'Stock Level', 'Re-Order Level', 'Quantity'];
                const rows = currentReports.map(report => [
                    report.supplierId,
                    report.supplierName,
                    report.productId,
                    report.stockLevel,
                    report.reorderLevel,
                    report.quantity
                ]);

                const csvContent = [
                    headers.join(','),
                    ...rows.map(row => row.join(','))
                ].join('\n');

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);

                link.setAttribute('href', url);
                link.setAttribute('download', 'inventory_report.csv');
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            // Fetch sales report
            function fetchSalesReport() {
                fetch(salesReportUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch sales report');
                        }
                        return response.json();
                    })
                    .then(data => {
                        currentSalesReport = data;
                        displaySalesReport(data);
                    })
                    .catch(error => displayMessage(error.message, true));
            }

            // Display sales report
            function displaySalesReport(reportData) {
                const reportList = document.getElementById("SalesReportList");

                if (reportData.length === 0) {
                    reportList.innerHTML = '<p>No sales data found.</p>';
                    return;
                }

                reportList.innerHTML = `<br/><table>
                                                <tr><th>Product ID</th><th>Product Name</th><th>Total Quantity Sold</th><th>Total Revenue</th></tr>
                                                ${reportData.map(report => `
                                                    <tr>
                                                        <td>${report.productId}</td>
                                                        <td>${report.name}</td>
                                                        <td>${report.totalQuantitySold}</td>
                                                        <td>${report.totalRevenue.toFixed(2)}</td>
                                                    </tr>`).join('')}
                                            </table>`;
            }

            // Fetch supplier performance report
            $(document).ready(function () {
                $('#getSupplierPerformanceBtn').click(function () {
                    $('#supplierPerformanceReport').html('<p>Loading...</p>');

                    $.ajax({
                        url: supplierPerformanceUrl,
                        type: 'GET',
                        success: function (data) {
                            if (data && data.length > 0) {
                                let reportHtml = `<h3>Supplier Performance Report:</h3><table border="1">
                                                        <thead>
                                                            <tr>
                                                                <th>Supplier ID</th>
                                                                <th>Supplier Name</th>
                                                                <th>Total Products Supplied</th>
                                                                <th>Top Supplier</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>`;

                                data.forEach(function (supplier) {
                                    reportHtml += `<tr>
                                                            <td>${supplier.supplierId}</td>
                                                            <td>${supplier.name}</td>
                                                            <td>${supplier.totalProductsSupplied}</td>
                                                            <td>${supplier.isTopSupplier ? 'Yes' : 'No'}</td>
                                                        </tr>`;
                                });

                                reportHtml += `</tbody></table>`;
                                $('#supplierPerformanceReport').html(reportHtml);
                            } else {
                                $('#supplierPerformanceReport').html('<p>No supplier performance data found.</p>');
                            }
                        },
                        error: function () {
                            $('#supplierPerformanceReport').html('<p>Error loading supplier performance report.</p>');
                        }
                    });
                });
            });
        </script>

    </body>
    </html>*@
@{
    ViewBag.Title = "Report";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report Management</title>
    <style>
        /* Your existing CSS styles here */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-image: url("https://img.freepik.com/premium-photo/abstract-design-elementannual-saleshopping-season-conceptmini-cart-with-colorful-paper-bag-white-wooden-table-backgroundtop-viewflat-lay_1040174-5645.jpg?ga=GA1.1.1982704250.1732540291&semt=ais_hybrid");
            background-repeat: no-repeat;
            background-size: cover;
        }

        h1 {
            text-align: center;
            color: black;
        }

        h2, h3 {
            text-align: center;
            color: black;
        }

        button {
            padding: 10px;
            width: 30%;
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            border-radius: 4px;
        }

            button:hover {
                background-color: #2980b9;
            }

        #responseMessage {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
        }

        #ReportsList, #SalesReportList, #supplierPerformanceReport {
            margin-top: 30px;
        }

        table {
            background-color: white;
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2980b9;
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

    <h1>Report Management</h1>

    <label id="responseMessage"></label>

    <h2>StockLevel Report</h2>
    <button type="button" onclick="fetchAllReports()">StockLevel Report</button>

    <button type="button" onclick="downloadStockLevelReport()" style="margin-left: 70px;">Download StockLevel Report</button>
    <div id="ReportsList"></div>

    <h2>Supplier Performance Report</h2>
    <button id="getSupplierPerformanceBtn"> Supplier Performance</button>

    <!-- Add a class or inline style for spacing -->
    <button type="button" onclick="downloadSupplierPerformanceReport()" style="margin-left: 70px;">Download Supplier Performance Report</button>

    <div id="supplierPerformanceReport"></div>

    <h2>Sales Report Management</h2>
    <button type="button" onclick="fetchSalesReport()" >Sales Report</button>

    <button type="button" onclick="downloadSalesReport()"style="margin-left: 70px;">Download Sales Report</button>
    <div id="SalesReportList"></div>

    <script>
        const apiUrl = 'http://localhost:5108/api/Reports/inventoryreport';  // Inventory report endpoint
        const salesReportUrl = 'http://localhost:5108/api/Reports/salesreport';  // Sales report endpoint
        const supplierPerformanceUrl = 'http://localhost:5108/api/Reports/supplier-performance';  // Supplier performance endpoint
        let currentReports = [];
        let currentSalesReport = [];
        let currentSupplierPerformanceReport = [];

        // Function to display messages
        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        // Fetch all reports
        function fetchAllReports() {
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch reports');
                    }
                    return response.json();
                })
                .then(data => {
                    currentReports = data;
                    displayReports(data);
                })
                .catch(error => displayMessage(error.message, true));
        }

        // Display reports in a table
        function displayReports(reports) {
            const reportsList = document.getElementById("ReportsList");

            if (reports.length === 0) {
                reportsList.innerHTML = '<p>No reports found.</p>';
                return;
            }

            reportsList.innerHTML = `<br/><table>
                                                    <tr><th>Supplier ID</th><th>Supplier Name</th><th>Product Id</th><th>Stock Level</th><th>Re-Order Level</th><th>Quantity</th></tr>
                                                    ${reports.map(report => `
                                                        <tr>
                                                            <td>${report.supplierId}</td>
                                                            <td>${report.supplierName}</td>
                                                            <td>${report.productId}</td>
                                                            <td>${report.stockLevel}</td>
                                                            <td>${report.reorderLevel}</td>
                                                            <td>${report.quantity}</td>
                                                        </tr>`).join('')}
                                                </table>`;
        }

        // Download StockLevel Report as CSV
        function downloadStockLevelReport() {
            if (currentReports.length === 0) {
                displayMessage('No StockLevel report available for download', true);
                return;
            }

            const headers = ['Supplier ID', 'Supplier Name', 'Product Id', 'Stock Level', 'Re-Order Level', 'Quantity'];
            const rows = currentReports.map(report => [
                report.supplierId,
                report.supplierName,
                report.productId,
                report.stockLevel,
                report.reorderLevel,
                report.quantity
            ]);

            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'stocklevel_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Fetch sales report
        function fetchSalesReport() {
            fetch(salesReportUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch sales report');
                    }
                    return response.json();
                })
                .then(data => {
                    currentSalesReport = data;
                    displaySalesReport(data);
                })
                .catch(error => displayMessage(error.message, true));
        }

        // Display sales report
        function displaySalesReport(reportData) {
            const reportList = document.getElementById("SalesReportList");

            if (reportData.length === 0) {
                reportList.innerHTML = '<p>No sales data found.</p>';
                return;
            }

            reportList.innerHTML = `<br/><table>
                                                    <tr><th>Product ID</th><th>Product Name</th><th>Total Quantity Sold</th><th>Total Revenue</th></tr>
                                                    ${reportData.map(report => `
                                                        <tr>
                                                            <td>${report.productId}</td>
                                                            <td>${report.name}</td>
                                                            <td>${report.totalQuantitySold}</td>
                                                            <td>${report.totalRevenue.toFixed(2)}</td>
                                                        </tr>`).join('')}
                                                </table>`;
        }

        // Download Sales Report as CSV
        function downloadSalesReport() {
            if (currentSalesReport.length === 0) {
                displayMessage('No Sales report available for download', true);
                return;
            }

            const headers = ['Product ID', 'Product Name', 'Total Quantity Sold', 'Total Revenue'];
            const rows = currentSalesReport.map(report => [
                report.productId,
                report.name,
                report.totalQuantitySold,
                report.totalRevenue.toFixed(2)
            ]);

            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'sales_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Fetch supplier performance report
        $(document).ready(function () {
            $('#getSupplierPerformanceBtn').click(function () {
                $('#supplierPerformanceReport').html('<p>Loading...</p>');

                $.ajax({
                    url: supplierPerformanceUrl,
                    type: 'GET',
                    success: function (data) {
                        currentSupplierPerformanceReport = data;
                        if (data && data.length > 0) {
                            let reportHtml = `<h3>Supplier Performance Report:</h3><table border="1">
                                                            <thead>
                                                                <tr>
                                                                    <th>Supplier ID</th>
                                                                    <th>Supplier Name</th>
                                                                    <th>Total Products Supplied</th>
                                                                    <th>Top Supplier</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>`;

                            data.forEach(function (supplier) {
                                reportHtml += `<tr>
                                                                <td>${supplier.supplierId}</td>
                                                                <td>${supplier.name}</td>
                                                                <td>${supplier.totalProductsSupplied}</td>
                                                                <td>${supplier.isTopSupplier ? 'Yes' : 'No'}</td>
                                                            </tr>`;
                            });

                            reportHtml += `</tbody></table>`;
                            $('#supplierPerformanceReport').html(reportHtml);
                        } else {
                            $('#supplierPerformanceReport').html('<p>No supplier performance data found.</p>');
                        }
                    },
                    error: function () {
                        $('#supplierPerformanceReport').html('<p>Error loading supplier performance report.</p>');
                    }
                });
            });
        });

        // Download Supplier Performance Report as CSV
        function downloadSupplierPerformanceReport() {
            if (currentSupplierPerformanceReport.length === 0) {
                displayMessage('No Supplier Performance report available for download', true);
                return;
            }

            const headers = ['Supplier ID', 'Supplier Name', 'Total Products Supplied', 'Top Supplier'];
            const rows = currentSupplierPerformanceReport.map(supplier => [
                supplier.supplierId,
                supplier.name,
                supplier.totalProductsSupplied,
                supplier.isTopSupplier ? 'Yes' : 'No'
            ]);

            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.join(','))
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);

            link.setAttribute('href', url);
            link.setAttribute('download', 'supplier_performance_report.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>

</body>
</html>

