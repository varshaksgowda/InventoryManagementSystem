
@{
    ViewBag.Title = "Supplier";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Supplier</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            background-image: url("https://img.freepik.com/premium-photo/smart-warehouse-inventory-management-system-concept-manager-using-digital-tablet-showing-warehouse-software-management-dashboard-blurred-warehouse-as-background_114016-20887.jpg");
            background-repeat: no-repeat;
            background-size: cover;
        }

        h1 {
            text-align: center;
            color: white;
        }

        #ProductForm {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px auto;
        }

        .form-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

            .form-group label {
                flex: 0 0 30%;
                font-weight: bold;
                color: #2c3e50;
            }

            .form-group input {
                flex: 1;
                padding: 8px;
                border-radius: 4px;
                border: 1px solid #ccc;
            }

        button {
            padding: 10px;
            width: 100%;
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            border-radius: 4px;
        }

            button:hover {
                background-color: #2980b9;
            }

        #responseMessage {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
        }

        #SuppliersList {
            margin-top: 30px;
        }

        table {
            background-color: white; /* Set background color to white */
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2980b9;
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>

    <h1>Supplier Management</h1>

    <div id="ProductForm">
        <div class="form-group">
            <label for="supplierId">Supplier ID:</label>
            <input type="number" id="supplierId" name="supplierId" required disabled>
        </div>

        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>
        </div>

        <div class="form-group">
            <label for="contactInfo">Contact no:</label>
            <input type="text" id="contactInfo" name="contactInfo" required>
        </div>

        <div class="form-group">
            <label for="address">Address:</label>
            <input type="text" id="address" name="address" required>
        </div>

        <button type="button" onclick="postSupplier()">Submit</button>
        <button type="button" onclick="putSupplier()">Update</button>
    </div>

    <label id="responseMessage"></label>

    <h2 style="color:antiquewhite">View All Suppliers</h2>
    <button type="button" onclick="fetchAllSuppliers()">Get All Suppliers</button>

    <div id="SuppliersList"></div>

    <script>
        const apiUrl = 'https://localhost:44340/api/Suppliers'; // Adjust API URL accordingly

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        function postSupplier() {
            const supplierData = {
                supplierId: parseInt(document.getElementById("supplierId").value),
                contactInfo: document.getElementById("contactInfo").value,
                name: document.getElementById("name").value,
                address: document.getElementById("address").value
            };

            fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(supplierData)
            })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to POST'))
                .then(data => displayMessage('Supplier added successfully.'))
                .catch(error => displayMessage(error, true));
        }

        function putSupplier() {
            const supplierId = document.getElementById("supplierId").value;
            const supplierData = {
                supplierId: parseInt(supplierId),
                contactInfo: document.getElementById("contactInfo").value,
                name: document.getElementById("name").value,
                address: document.getElementById("address").value
            };

            fetch(`${apiUrl}/${supplierId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(supplierData)
            })
                .then(response => {
                    if (response.ok) {
                        displayMessage('Supplier updated successfully.');
                    } else {
                        throw new Error('Failed to PUT');
                    }
                })
                .catch(error => displayMessage(error.message, true));
        }

        function fetchAllSuppliers() {
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => displaySuppliers(data))
                .catch(error => displayMessage('Error fetching suppliers.', true));
        }

        function displaySuppliers(suppliers) {
            const suppliersList = document.getElementById("SuppliersList");
            suppliersList.innerHTML = `
                    <h3>Supplier List:</h3>
                    <table>
                        <tr><th>ID</th><th>Name</th><th>Contact no</th><th>Address</th><th>Action</th></tr>
                        ${suppliers.map(supplier => `
                            <tr>
                                <td>${supplier.supplierId}</td>
                                <td>${supplier.name}</td>
                                <td>${supplier.contactInfo}</td>
                                <td>${supplier.address}</td>
                                <td>
                                    <button type="button" onclick="editSupplier(${supplier.supplierId})">EDIT</button>
                                    <button type="button" onclick="deleteSupplier(${supplier.supplierId})">DELETE</button>
                                </td>
                            </tr>`).join('')}
                    </table>
                `;
        }

        function editSupplier(supplierId) {
            fetch(`${apiUrl}/${supplierId}`)
                .then(response => response.json())
                .then(data => {
                    // Set the values in the form
                    document.getElementById("supplierId").value = data.supplierId;
                    document.getElementById("name").value = data.name;
                    document.getElementById("contactInfo").value = data.contactInfo;
                    document.getElementById("address").value = data.address;

                    // Make supplierId input disabled (not editable)
                    document.getElementById("supplierId").disabled = true; // Disable editing the supplierId field

                    // Scroll to the top of the page
                    window.scrollTo(0, 0);
                })
                .catch(error => displayMessage('Error fetching supplier for editing.', true));
        }

        function deleteSupplier(supplierId) {
            fetch(`${apiUrl}/${supplierId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (response.ok) {
                        displayMessage(`Supplier with ID ${supplierId} deleted successfully.`);
                        fetchAllSuppliers();
                    } else {
                        return Promise.reject('Failed to DELETE');
                    }
                })
                .catch(error => displayMessage(error, true));
        }
    </script>
</body>
</html>

